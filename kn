#!/bin/bash
set -e

source koi
koiname=kn
koidescription="CLI manager for konphig"

__updated=0

function init {
	__addarg "-h" "--help" "help" "optional" "" "Initialize kn"
	__addarg "" "path" "positionalvalue" "required" "" "Path to konphig repository" "__verifydirectory"
	__addarg "-f" "--force" "flag" "optional" "" "Force overwrite an existing initialization"
	__parseargs "$@"

	if [[ -d ~/.konphig ]] ; then
		if [[ $force -eq 0 ]] ; then
			__errortext "$koiname: err: kn is already initialized"
			__errortext "  Use 'kn init --force' to overwrite"
			return 1
		fi
	fi

	local abspath

	abspath="$(cd "$path" ; pwd)"
	mkdir -p ~/.konphig
	echo "$abspath" > ~/.konphig/source
	echo > ~/.konphig/repos
	mkdir -p ~/.konphig/functions

	echo "Initialized ~/.konphig"
}

function alias {
	__addarg "-h" "--help" "help" "optional" "" "Create a new alias"
	__addarg "-g" "--global" "flag" "optional" "" "Also add the alias to the installed list of aliases"
	__addarg "" "alias" "positionalvalue" "required" "" "The alias for the new command"
	__addarg "" "meaning" "positionalvalue" "required" "" "The meaning of the new alias (what the alias expands to)"
	__parseargs "$@"
}

function variable {
	__addarg "-h" "--help" "help" "optional" "" "Create a new variable"
	__addarg "-g" "--global" "flag" "optional" "" "Also add the alias to the installed list of variables"
	__addarg "" "name" "positionalvalue" "required" "" "The name of the new variable"
	__addarg "" "value" "positionalvalue" "required" "" "The value of the new variable"
	__parseargs "$@"
}

function update {
	__addarg "-h" "--help" "help" "optional" "" "Update system files to match those in konphig"
	__parseargs "$@"
	# once install with brew, need to source /usr/local/bin/kn

	__verifykn

	local ostype source functions fn
	if [[ "$(uname -s)" == *Darwin* ]] ; then
		ostype=macOS
	else
		ostype=linux
	fi

	source="$(cat ~/.konphig/source)"

	# update source files
	# __update "${source}/aliases" ~/.bash_aliases
	# __update "${source}/rc/.bash_profile" ~/.bash_profile
	# __update "${source}/rc/.bashrc" ~/.bashrc
	# __update "${source}/variables" ~/.bash_variables
	# __update "${source}/rc/.gitconfig" ~/.gitconfig
	# __update "${source}/rc/.git-prompt.sh" ~/.git-prompt.sh
	# __update "${source}/rc/.profile" ~/.profile
	# __update "${source}/rc/.pypirc" ~/.pypirc
	# __update "${source}/rc/.tmux.conf" ~/.tmux-conf
	# __update "${source}/rc/.vimrc" ~/.vimrc

	# update functions
	functions=( "${source}/functions/${ostype}"/* )
	for functionfile in "${functions[@]}" ; do
		fn=$(basename "$functionfile")
		if [[ ! -f ~/.konphig/functions/$fn ]] ; then
			echo "Adding function $fn"
			# yes | cp -f "$functionfile" ~/.konphig/functions/$fn
		else
			__update "$functionfile" ~/.konphig/functions/$fn
		fi
	done
	installed_functions=( ~/.konphig/functions/* )
	for functionfile in "${installed_functions[@]}" ; do
		fn=$(basename "$functionfile")
		if [[ ! -f "${source}/functions/${ostype}/${fn}" ]] ; then
			rm -f "$functionfile"
		fi
	done
}

function __update {
	# update a konphig source file
	# $1 is the repository konphig file
	# $2 is the system file

	if ! __check "$1" "$2" ; then
		echo "Updating $2"
		__updated=1
		# yes | cp -f "$1" "$2"
	fi
}

function __check {
	# compare two files based on MD5 hash
	# $1 is the first file
	# $2 is the second file
	if [[ "$(uname -s)" == *Darwin* ]] ; then
		if [[ "$(md5 -q "$1")" != "$(md5 -q "$2")" ]] ; then
			return 1
		fi
	else
		if [[ "$(md5sum "$1")" != "$(md5sum "$2")" ]] ; then
			return 1
		fi
	fi
}

function fn {
	__addarg "-h" "--help" "help" "optional" "" "Interact with konphig functions"
	__addarg "-c" "--count" "flag" "optional" "" "Show the number of functions"
	__addarg "-l" "--list" "flag" "optional" "" "List all functions"
	__addarg "-g" "--get" "storevalue" "optional" "" "Get a specific function"
	__addarg "-q" "--quiet" "flag" "optional" "" "If included, omit supplemental output"
	__parseargs "$@"
}

function pull {
	__addarg "-h" "--help" "help" "optional" "" "Pull all registered repositories"
	__parseargs "$@"
}

function repo {
	__addarg "-h" "--help" "help" "optional" "" "Register a new repository with kn"
	__addarg "" "repo" "positionalvalue" "required" "" "The repository to register" "__verifydirectory"
	__parseargs "$@"

	__verifykn

	# should check if repo is already registered
	
	local name abspath
	name="$(basename "$repo")"
	abspath="$(cd "$repo" ; pwd)"
	echo "${name}: ${abspath}" >> ~/.konphig/repos

	echo "Registered repository '$name'"
}

function new {
	__addarg "-h" "--help" "help" "optional" "" "Add a new entity to track in konphig"
	__addarg "-b" "--brew" "storevalue" "optional" "" "Add a new Homebrew formula to konphig"
	__addarg "-c" "--cask" "flag" "optional" "" "Use a Homebrew cask instead of a regular formula"
	__addarg "-y" "--yarn" "storevalue" "optional" "" "Add a new yarn package to konphig"
	__addarg "-H" "--hyper" "storevalue" "optional" "" "Add a new hyper package to konphig"
	__parseargs "$@"
}

function status {
	__addarg "-h" "--help" "help" "optional" "" "Get the status of the konphig repo"
	__parseargs "$@"

	__verifykn
	source="$(cat ~/.konphig/source)"

	(cd "$source" ; git status)
}

function __verifykn {
	# verify that kn is initialized correctly

	if [[ ! -d ~/.konphig ]] ; then
		__errortext "$koiname: err: kn has not been initialized"
		__errortext "  Use 'kn init' to initialize"
		return 1
	fi

	if [[ ! -f ~/.konphig/source ]] ; then
		__errortext "$koiname: err: missing konphig source file"
		__errortext "  Use 'kn init --force' to reinitialize"
		return 1
	fi

	if [[ ! -f ~/.konphig/repos ]] ; then
		__errortext "$koiname: err: missing konphig repository file"
		__errortext "  Use 'kn init --force' to reinitialize"
		return 1
	fi

	if [[ ! -d ~/.konphig/functions ]] ; then
		__errortext "$koiname: err: missing konphig functions directory"
		__errortext "  Use 'kn init --force' to reinitialize"
		return 1
	fi
}

__koirun "$@"